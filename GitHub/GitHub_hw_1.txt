GIT Homework 1

JSON
 1. Создать внешний репозиторий c названием JSON.
 	-перейти по ссылке https://github.com/
 	-нажать кнопку "NEW"
 	-в поле "Repository name" ввести JSON
 	-отметить галочкой "Add a README file"
 	-нажать кнопку "Create repository"
 2. Клонировать репозиторий JSON на локальный компьютер.
 	-перейти по ссылке https://github.com/MaximSinyavsky/JSON
 	-нажать кнопку "code"
 	-в вкладке https скопировать URL
 	-в окне gitbush ввести:
 	$ git clone https://github.com/MaximSinyavsky/JSON.git
 3. Внутри локального JSON создать файл “new.json”.
 	$ > new.json
 4. Добавить файл под гит.
 	$ git add new.json
 5. Закоммитить файл.
 	$ git commit -m "add new.json"
 6. Отправить файл на внешний GitHub репозиторий.
 	$ git push
 7. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 	$ vim new.json
 		-нажимаем "i"
 		{
    		"Name": "Maxim",
    		"Age": "30",
    		"Amount_pets": "1",
    		"Desired_salary": "1000$"
		}
		-нажимаем "esc", пишим ":wq", нажимаем "enter"
 8. Отправить изменения на внешний репозиторий.
 	$ git commit -am "update new.json"
	$ git push
 9. Создать файл preferences.json
 	$ > preferences.json
 10. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
  		$ vim preferences.json
 		-нажимаем "i"
		{
	    "Muvie": "Avengers",
	    "Series": "Supernatural",
	    "Food": "Meat",
	    "Season": "Summer",
	    "Country": "Italy"
	    }
		-нажимаем "esc", пишим ":wq", нажимаем "enter"
 11. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
	  	$ vim skills.json
 		-нажимаем "i"
	 		{
		    "Skills_1": "Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC",
		    "Skills_2": "Что такое клиент-серверная архитектура",
		    "Skills_3": "HTTP Методы запросов на сервер",
		    "Skills_4": "Коды ответов HTTP сервера",
		    "Skills_5": "Структуры HTTP запросов и ответов",
		    "Skills_6": "Что такое JSON, XML. Их структура",
		    "Skills_7": "Тестирование API через Postman (JS, автотесты API)",
		    "Skills_8": "Снятие и чтение логов c внешнего сервера",
		    "Skills_9": "Снифинг http web трафика через Charles и Fiddler",
		    "Skills_10": "Dev Tools веб браузеров (Google Chrome, FireFox)",
		    "Skills_11": "Мобильное тестирование",
		    "Skills_12": "Особенность iOS, Android, гайдлайны",
		    "Skills_13": "Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)",
		    "Skills_14": "Сборка Android приложений на Android Studio.",
		    "Skills_15": "ADB (управление андройд девайсами)",
		    "Skills_16": "Настройка прокси и vpn на iOS и Android",
		    "Skills_17": "Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android",
		    "Skills_18": "Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)",
		    "Skills_19": "Основы bash скриптинг, автоматизация рутинных задач на сервере",
		    "Skills_20": "Доступ к удалённым серверам",
		    "Skills_21": "Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)",
		    "Skills_22": "База данных Postgres (установка, настройка и использование)",
		    "Skills_23": "Нереляционная база данных Redis (установка, настройка и использование)",
		    "Skills_24": "Нагрузочное тестирование в Jmeter",
		    "Skills_25": "Методология разработки Scrum",
		    "Skills_26": "Python. (Изучение основ. Создание клиент серверного приложения)"
			}
		-нажимаем "esc", пишим ":wq", нажимаем "enter"
 12. Отправить сразу 2 файла на внешний репозиторий.
 	$ git add .
 	$ git commit -m "add preferences and skills"
	$ git push
 13. На веб интерфейсе создать файл bug_report.json.
 	-перейти по ссылке https://github.com/MaximSinyavsky/JSON
 	-нажать кнопку "add file"
 	-из развернувшегося списка выбрать "Create new file"
 	-в поле "name your file..." ввести bug_report.json
 14. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 	-в поле "Commit new file" ввести "create new file"
 	-нажать кнопку "Commit new file"
 15. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 	-перейти по ссылке https://github.com/MaximSinyavsky/JSON/blob/main/bug_report.json
 	-нажать кнопу "Edit this file"
 		{
		  "ID":"1",
		  "title":"Не Работает кнопка оплаты",
		  "step to reproduce":"пройти по ссылке..., добавить товар в корзину, перейти в корзину, нажать кнопку для оплаты....",
		  "Environment":"Операционная система Win 10, browser Chrome 10.1",
		  "expected result":"Прошла оплата",
		  "actual result":"Ничего не происходит, деньги не снимаются",
		  "Reporter":"Синявский Максим",
		  "severity":"Blocker",
		  "priority":"High",
		  "attachment":"Прикрепленные скриншоты"
			}
 16. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
  	-в поле "Commit new file" ввести "update new file"
 	-нажать кнопку "Commit new file"
 17. Синхронизировать внешний и локальный репозиторий JSON
	$ git fetch
	$ git pull
	
XML
 1. Создать внешний репозиторий c названием XML.
 2. Клонировать репозиторий XML на локальный компьютер.
 3. Внутри локального XML создать файл “new.xml”.
 4. Добавить файл под гит.
 5. Закоммитить файл.
 6. Отправить файл на внешний GitHub репозиторий.
 7. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 8. Отправить изменения на внешний репозиторий.
 9. Создать файл preferences.xml
 10. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 11. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 12. Сделать коммит в одну строку.
 13. Отправить сразу 2 файла на внешний репозиторий.
 14. На веб интерфейсе создать файл bug_report.xml.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий XML

TXT
 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер.
 3. Внутри локального TXT создать файл “new.txt”.
 4. Добавить файл под гит.
 5. Закоммитить файл.
 6. Отправить файл на внешний GitHub репозиторий.
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 8. Отправить изменения на внешний репозиторий.
 9. Создать файл preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 12. Сделать коммит в одну строку.
 13. Отправить сразу 2 файла на внешний репозиторий.
 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT
