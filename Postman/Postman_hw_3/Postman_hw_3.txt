1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)
password : str
Приходящий токен необходимо передать во все остальные запросы.
var responseData = pm.response.json();
pm.environment.set("token", responseData.token);
=============================================================
2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token

resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
//1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//2) Проверка структуры json в ответе.
var schema = {
    "type": "object",
    "required": [
        "start_qa_salary",
        "qa_salary_after_6_months",
        "qa_salary_after_12_months",
        "person"
    ],
    "properties": {
        "start_qa_salary": {
            "type": "integer"
        },
        "qa_salary_after_6_months": {
            "type": "integer"
        },
        "qa_salary_after_12_months": {
            "type": "integer"
        },
        "person": {
            "type": "object",
            "required": [
                "u_name",
                "u_age",
                "u_salary_1.5_year"
            ],
            "properties": {
                "u_name": {
                    "type": "array"
                },
                "u_age": {
                    "type": "integer"
                },
                "u_salary_1.5_year": {
                    "type": "integer"
                }
            }
        }
    }
};
pm.test("Check json schema", function(){
    pm.response.to.have.jsonSchema(schema)
});
//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
var responseDate = pm.response.json();
var requestDate = JSON.parse(request.data);
pm.test("qa_salary_after_6_months multiplication check", function(){
    pm.expect(requestDate.salary*2).to.have.eql(responseDate.qa_salary_after_6_months)
});
pm.test("qa_salary_after_12_months multiplication check", function(){
    pm.expect(requestDate.salary*2.9).to.have.eql(responseDate.qa_salary_after_12_months)
});
pm.test("u_salary_1.5_year multiplication check", function(){
    pm.expect(requestDate.salary*4).to.have.eql(responseDate.person.u_salary_1_5_year)
});
//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
pm.environment.set("u_salary_1.5_year", responseDate.person.u_salary_1_5_year);
=============================================================
3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
//1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//2) Проверка структуры json в ответе.
var schema = {
    "type": "object",
    "required": [
        "name",
        "age",
        "salary"
    ],
    "properties": {
        "name": {
            "type": "string"
        },
        "age": {
            "type": "integer"
        },
        "salary": {
            "type": "array"
        }
    }
};
pm.test("Check json schema", function(){
    pm.response.to.have.jsonSchema(schema)
});
//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
var responseDate = pm.response.json();
var requestData = request.data;
pm.test("salary check", function(){
    pm.expect(responseDate.salary[0]).to.have.eql(+requestData.salary)
});
pm.test("salary*2 check", function(){
    pm.expect(+responseDate.salary[1]).to.have.eql(requestData.salary*2)
});
pm.test("salary*3 check", function(){
    pm.expect(+responseDate.salary[2]).to.have.eql(requestData.salary*3)
});
//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
pm.test("secons elemet is greater than first element", function(){
    pm.expect(responseDate.salary[2]>responseDate.salary[1]).to.be.true
});
=============================================================
4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token

Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}

Тесты:
//1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//2) Проверка структуры json в ответе.
var schema = {
    "type": "object",
    "required": [
        "name",
        "age",
        "daily_food",
        "daily_sleep"
    ],
    "properties": {
        "name": {
            "type": "string"
        },
        "age": {
            "type": "integer"
        },
        "daily_food": {
            "type": "number"
        },
        "daily_sleep": {
            "type": "number"
        }
    }
};
pm.test("Check json schema", function(){
    pm.response.to.have.jsonSchema(schema)
});
//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.
var responseDate = pm.response.json();
var requestData = request.data;
pm.test("check daily_food", function(){
    pm.expect(responseDate.daily_food/requestData.weight).to.have.eql(0.012)
});
pm.test("daily_sleep", function(){
    pm.expect(responseDate.daily_sleep/requestData.weight).to.have.eql(2.5)
});
=============================================================
5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
// 1) Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 2) Проверка структуры json в ответе.
var schema = {
    "type": "object",
    "required": [
        "name",
        "age",
        "salary",
        "family"
    ],
    "properties": {
        "name": {
            "type": "string"
        },
        "age": {
            "type": "integer"
        },
        "salary": {
            "type": "integer"
        },
        "family": {
            "type": "object",
            "required": [
                "children",
                "u_salary_1.5_year"
            ],
            "properties": {
                "children": {
                    "type": "array"
                },
                "u_salary_1.5_year": {
                    "type": "integer"
                }
            }
        }
    }
};
pm.test("Check json schema", function(){
    pm.response.to.have.jsonSchema(schema)
});
// 3) Проверить что занчение поля name = значению переменной name из окружения
var responseDate = pm.response.json();
var requestData = request.data;
pm.test("requestName equel responseName", function(){
    pm.expect(responseDate.name).to.have.eql(pm.environment.get("name"))
});
// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age
pm.test("requestAge equel responseAge", function(){
    pm.expect(responseDate.age).to.have.eql(responseDate.age)
});
=============================================================
6) http://162.55.220.72:5005/currency
req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
