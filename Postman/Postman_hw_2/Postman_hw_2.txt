http://162.55.220.72:5005/first
//Отправить запрос.
//Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//Проверить, что в body приходит правильный string:
pm.test("Body is correct", function () {
pm.response.to.have.body("This is the first responce from server!")
});




http://162.55.220.72:5005/object_info_3
//Отправить запрос.
//Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//Спарсить response body в json:
var responseData = pm.response.json();
//Проверить, что name в ответе равно name s request (name вбить руками):
pm.test("manual request name equals response name", function () {
    pm.expect(responseData.name).to.eql("Maxim");
});
//Проверить, что age в ответе равно age s request (age вбить руками):
pm.test("manual request age equals response age", function(){
    pm.expect(+responseData.age).to.eql(30)
});
//Проверить, что salary в ответе равно salary s request (salary вбить руками):
pm.test("manual request salary equals response salary", function(){
    pm.expect(responseData.salary).to.eql(2000)
});
//Спарсить request:
var requestData = request.data;
//Проверить, что name в ответе равно name s request (name забрать из request):
pm.test("request name equals response name", function(){
    pm.expect(requestData.name).to.eql(responseData.name)
});
//Проверить, что age в ответе равно age s request (age забрать из request):
pm.test("request age equals response age", function () {
    pm.expect(requestData.age).to.eql(responseData.age)
});
//Проверить, что salary в ответе равно salary s request (salary забрать из request):
pm.test("request salary equals response salary", function () {
    pm.expect(+requestData.salary).to.eql(responseData.salary)
});
//Вывести в консоль параметр family из response:
console.log(responseData.family);
//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):
pm.test("u_salary_1_5_year in responseData equals salary*4", function(){
    pm.expect(responseData.family.u_salary_1_5_year).to.eql(+requestData.salary*4)
});



http://162.55.220.72:5005/object_info_4
//Отправить запрос.
//Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//Спарсить request:
var requestData = pm.request.url.query.toObject();
//Спарсить response:
var responseData = pm.response.json();
//Проверить, что name в ответе равно name s request (name забрать из request):
pm.test("response name equals request name", function () {
    pm.expect(responseData.name).to.eql(requestData.name)
});
//Проверить, что age в ответе равно age s request (age забрать из request):
pm.test("response age equals request age", function () {
    pm.expect(responseData.age).to.eql(requestData.age)
});
//Проверить, что salary в ответе равно salary s request (salary забрать из request):
pm.test("response salary equals request salary", function (){
    pm.expect(responseData.salary).to.eql(+requestData.salary)
});
//Вывести в консоль параметр family из response:
console.log(responseData.family);
//Проверить, что у параметра dog есть параметры name:
pm.test("dog have parameter name", function(){
    pm.expect(responseData.family.pets.dog).to.have.property("name")
});
//Проверить, что у параметра dog есть параметры age:
pm.test("dog have parameter age",function(){
    pm.expect(responseData.family.pets.dog).to.have.property("age")
});
//Проверить, что параметр name имеет значение Luky:
pm.test("name have parameter Luky v1", function(){
    pm.expect(responseData.family.pets.dog.name).to.eql("Luky")
});
pm.test("name have parameter Luky v2", function(){
    pm.expect(responseData.family.pets.dog).to.include({"name":"Luky"})
});
//Проверить, что параметр age имеет значение 4:
pm.test("age have parameter 4 v1", function(){
    pm.expect(responseData.family.pets.dog.age).to.eql(4)
});
pm.test("age have parameter 4 v2", function(){
    pm.expect(responseData.family.pets.dog).to.include({"age": 4})
});



http://162.55.220.72:5005/object_info_4
//Отправить запрос.
//Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//Спарсить response body в json:
var responseData = pm.response.json();
//Спарсить request:
var requestData = pm.request.url.query.toObject();
//Проверить, что name в ответе равно name s request (name забрать из request):
pm.test("response name equals request name", function(){
    pm.expect(responseData.name).to.eql(requestData.name)
}); 
//Проверить, что age в ответе равно age из request (age забрать из request):
pm.test("response age equals request age", function(){
    pm.expect(responseData.age).to.eql(requestData.age)
}); 
//Вывести в консоль параметр salary из request:
console.log(requestData.salary);
//Вывести в консоль параметр salary из response:
console.log(responseData.salary);
//Вывести в консоль 0-й элемент параметра salary из response:
console.log(responseData.salary[0]);
//Вывести в консоль 1-й элемент параметра salary параметр salary из response:
console.log(responseData.salary[1]);
//Вывести в консоль 2-й элемент параметра salary параметр salary из response:
console.log(responseData.salary[2]);
//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request):
pm.test("response salary[0] equals request salary", function(){
    pm.expect(responseData.salary[0]).to.eql(+requestData.salary)
});
//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request:
pm.test("response salary[1] equals request salary*2", function(){
    pm.expect(responseData.salary[1]).to.eql(+requestData.salary*2)
});
//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request):
pm.test("response salary[2] equals request salary*3", function(){
    pm.expect(responseData.salary[2]).to.eql(+requestData.salary*3)
});
//Создать в окружении переменную name:
//Создать в окружении переменную age:
//Создать в окружении переменную salary:
//Передать в окружение переменную name:
pm.environment.set("name", responseData.name);
//Передать в окружение переменную age:
pm.environment.set("age", responseData.age);
//Передать в окружение переменную salary:
pm.environment.set("salary", responseData.salary[0]);
//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:
let i = 0;
while(i<responseData.salary.length){
    console.log(responseData.salary[i])
    i++
};



http://162.55.220.72:5005/user_info_2
//Вставить параметр salary из окружения в request:
//Вставить параметр age из окружения в age:
//Вставить параметр name из окружения в name:
//Отправить запрос:
//Статус код 200:
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//Спарсить response body в json:
var responseData = pm.response.json();
//Спарсить request:
var requestData = pm.request.url.query.toObject();
//Проверить, что json response имеет параметр start_qa_salary:
pm.test("json response to have start_qa_salary", function(){
    pm.expect(responseData).to.have.property("start_qa_salary")
});
//Проверить, что json response имеет параметр qa_salary_after_6_months:
pm.test("json response to have qa_salary_after_6_months", function(){
    pm.expect(responseData).to.have.property("qa_salary_after_6_months")
});
//Проверить, что json response имеет параметр qa_salary_after_12_months:
pm.test("json response to have qa_salary_after_12_months", function(){
    pm.expect(responseData).to.have.property("qa_salary_after_12_months")
});
//Проверить, что json response имеет параметр qa_salary_after_1.5_year:
pm.test("json response to have qa_salary_after_1.5_year", function(){
    pm.expect(responseData).to.have.property("qa_salary_after_1.5_year")
});
//Проверить, что json response имеет параметр qa_salary_after_3.5_years:
pm.test("json response to have qa_salary_after_3.5_years", function(){
    pm.expect(responseData).to.have.property("qa_salary_after_3.5_years")
});
//Проверить, что json response имеет параметр person:
pm.test("json response to have person", function(){
    pm.expect(responseData).to.have.property("person")
});
//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request):
pm.test("start_qa_salary equals salary", function(){
    pm.expect(responseData.start_qa_salary).to.eql(requestData.salary)
});
//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request):
pm.test("salary_after_6_months equals salary*2", function(){
    pm.expect(responseData.qa_salary_after_6_months).to.eql(+requestData.salary*2)
});
//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request):
pm.test("qa_salary_after_12_months equals salary*2.7", function(){
    pm.expect(responseData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7)
});
//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request):
pm.test("qa_salary_after_1.5_year equals salary*3.3", function(){
    pm.expect(responseData["qa_salary_after_1.5_year"]).to.eql(+requestData.salary*3.3)
});
//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request):
pm.test("qa_salary_after_3.5_years equals salary*3.8", function(){
    pm.expect(responseData["qa_salary_after_3.5_years"]).to.eql(+requestData.salary*3.8)
});
//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request):
pm.test("response u_name[1] equals request salary", function(){
    pm.expect(responseData.person.u_name[1]).to.eql(+requestData.salary)
});
//Проверить, что что параметр u_age равен age из request (age забрать из request):
pm.test("response u_age equals request age", function(){
    pm.expect(responseData.person.u_age).to.eql(+requestData.age)
});
//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request):
pm.test("response u_salary_5_years equals request salary*4.2", function(){
    pm.expect(responseData.person.u_salary_5_years).to.eql(+requestData.salary*4.2)
});
//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person:
let i = 0;
while(i<responseData.person.u_name.length){
    console.log(responseData.person.u_name[i])
    i++
}