{
	"info": {
		"_postman_id": "5e84556a-083f-40ae-b523-dd3c94afa8fe",
		"name": "Postman_hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string:\r",
							"pm.test(\"Body is correct\", function () {\r",
							"pm.response.to.have.body(\"This is the first responce from server!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json:\r",
							"var responseData = pm.response.json();\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками):\r",
							"pm.test(\"manual request name equals response name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(\"Maxim\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками):\r",
							"pm.test(\"manual request age equals response age\", function(){\r",
							"    pm.expect(+responseData.age).to.eql(30)\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками):\r",
							"pm.test(\"manual request salary equals response salary\", function(){\r",
							"    pm.expect(responseData.salary).to.eql(2000)\r",
							"});\r",
							"//Спарсить request:\r",
							"var requestData = request.data;\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request):\r",
							"pm.test(\"request name equals response name\", function(){\r",
							"    pm.expect(requestData.name).to.eql(responseData.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request):\r",
							"pm.test(\"request age equals response age\", function () {\r",
							"    pm.expect(requestData.age).to.eql(responseData.age)\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request):\r",
							"pm.test(\"request salary equals response salary\", function () {\r",
							"    pm.expect(+requestData.salary).to.eql(responseData.salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response:\r",
							"console.log(responseData.family);\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):\r",
							"pm.test(\"u_salary_1_5_year in responseData equals salary*4\", function(){\r",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(+requestData.salary*4)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maxim",
							"type": "default"
						},
						{
							"key": "age",
							"value": "30",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						},
						{
							"key": "aut_toket",
							"value": "{{token}}",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить request:\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"//Спарсить response:\r",
							"var responseData = pm.response.json();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request):\r",
							"pm.test(\"response name equals request name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request):\r",
							"pm.test(\"response age equals request age\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestData.age)\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request):\r",
							"pm.test(\"response salary equals request salary\", function (){\r",
							"    pm.expect(responseData.salary).to.eql(+requestData.salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response:\r",
							"console.log(responseData.family);\r",
							"//Проверить, что у параметра dog есть параметры name:\r",
							"pm.test(\"dog have parameter name\", function(){\r",
							"    pm.expect(responseData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age:\r",
							"pm.test(\"dog have parameter age\",function(){\r",
							"    pm.expect(responseData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky:\r",
							"pm.test(\"name have parameter Luky v1\", function(){\r",
							"    pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"pm.test(\"name have parameter Luky v2\", function(){\r",
							"    pm.expect(responseData.family.pets.dog).to.include({\"name\":\"Luky\"})\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4:\r",
							"pm.test(\"age have parameter 4 v1\", function(){\r",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"pm.test(\"age have parameter 4 v2\", function(){\r",
							"    pm.expect(responseData.family.pets.dog).to.include({\"age\": 4})\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name=Maxim&age=30&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maxim"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json:\r",
							"var responseData = pm.response.json();\r",
							"//Спарсить request:\r",
							"var requestData = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request):\r",
							"pm.test(\"response name equals request name\", function(){\r",
							"    pm.expect(responseData.name).to.eql(requestData.name)\r",
							"}); \r",
							"//Проверить, что age в ответе равно age из request (age забрать из request):\r",
							"pm.test(\"response age equals request age\", function(){\r",
							"    pm.expect(responseData.age).to.eql(+requestData.age)\r",
							"}); \r",
							"//Вывести в консоль параметр salary из request:\r",
							"console.log(requestData.salary);\r",
							"//Вывести в консоль параметр salary из response:\r",
							"console.log(responseData.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response:\r",
							"console.log(responseData.salary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response:\r",
							"console.log(responseData.salary[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response:\r",
							"console.log(responseData.salary[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request):\r",
							"pm.test(\"response salary[0] equals request salary\", function(){\r",
							"    pm.expect(responseData.salary[0]).to.eql(+requestData.salary)\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request:\r",
							"pm.test(\"response salary[1] equals request salary*2\", function(){\r",
							"    pm.expect(+responseData.salary[1]).to.eql(+requestData.salary*2)\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request):\r",
							"pm.test(\"response salary[2] equals request salary*3\", function(){\r",
							"    pm.expect(+responseData.salary[2]).to.eql(+requestData.salary*3)\r",
							"});\r",
							"//Создать в окружении переменную name:\r",
							"//Создать в окружении переменную age:\r",
							"//Создать в окружении переменную salary:\r",
							"//Передать в окружение переменную name:\r",
							"pm.environment.set(\"name\", responseData.name);\r",
							"//Передать в окружение переменную age:\r",
							"pm.environment.set(\"age\", responseData.age);\r",
							"//Передать в окружение переменную salary:\r",
							"pm.environment.set(\"salary\", responseData.salary[0]);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\r",
							"let i = 0;\r",
							"while(i<responseData.salary.length){\r",
							"    console.log(responseData.salary[i])\r",
							"    i++\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Maxim&age=30&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maxim"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request:\r",
							"//Вставить параметр age из окружения в age:\r",
							"//Вставить параметр name из окружения в name:\r",
							"//Отправить запрос:\r",
							"//Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json:\r",
							"var responseData = pm.response.json();\r",
							"//Спарсить request:\r",
							"var requestData = request.data;\r",
							"//Проверить, что json response имеет параметр start_qa_salary:\r",
							"pm.test(\"json response to have start_qa_salary\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months:\r",
							"pm.test(\"json response to have qa_salary_after_6_months\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months:\r",
							"pm.test(\"json response to have qa_salary_after_12_months\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year:\r",
							"pm.test(\"json response to have qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years:\r",
							"pm.test(\"json response to have qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"//Проверить, что json response имеет параметр person:\r",
							"pm.test(\"json response to have person\", function(){\r",
							"    pm.expect(responseData).to.have.property(\"person\")\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request):\r",
							"pm.test(\"response start_qa_salary equals request salary\", function(){\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(+requestData.salary)\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request):\r",
							"pm.test(\"response salary_after_6_months equals request salary*2\", function(){\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(+requestData.salary*2)\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request):\r",
							"pm.test(\"response qa_salary_after_12_months equals request salary*2.7\", function(){\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7)\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request):\r",
							"pm.test(\"response qa_salary_after_1.5_year equals request salary*3.3\", function(){\r",
							"    pm.expect(responseData[\"qa_salary_after_1.5_year\"]).to.eql(+requestData.salary*3.3)\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request):\r",
							"pm.test(\"response qa_salary_after_3.5_years equals request salary*3.8\", function(){\r",
							"    pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.eql(+requestData.salary*3.8)\r",
							"});\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request):\r",
							"pm.test(\"response u_name[1] equals request request salary\", function(){\r",
							"    pm.expect(responseData.person.u_name[1]).to.eql(+requestData.salary)\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request):\r",
							"pm.test(\"response u_age equals request age\", function(){\r",
							"    pm.expect(responseData.person.u_age).to.eql(+requestData.age)\r",
							"});\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request):\r",
							"pm.test(\"response u_salary_5_years equals request salary*4.2\", function(){\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(+requestData.salary*4.2)\r",
							"});\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person:\r",
							"let i = 0;\r",
							"while(i<responseData.person.u_name.length){\r",
							"    console.log(responseData.person.u_name[i])\r",
							"    i++\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}